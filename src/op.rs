use std::ops::Generator;

use crate::{cpu::{Cpu, CpuFlag}, yield_from};
use CpuFlag::{C, H, N, Z};

pub fn run_rom_code(mut cpu: Cpu) -> impl Generator<Yield = u32, Return = Cpu> + 'static {
    #[rustfmt::skip]
    fn call(cpu: &mut Cpu) -> u32 {
        let opcode = cpu.fetch_byte();
        match opcode {
            0x00 => { 1 },
            0x01 => { let v = cpu.fetch_word(); cpu.set_bc(v); 3 },
            0x02 => { cpu.write_byte(cpu.bc(), cpu.a); 2 },
            0x03 => { cpu.set_bc(cpu.bc().wrapping_add(1)); 2 },
            0x04 => { cpu.b = cpu.alu_inc(cpu.b); 1 },
            0x05 => { cpu.b = cpu.alu_dec(cpu.b); 1 },
            0x06 => { cpu.b = cpu.fetch_byte(); 2 },
            0x07 => { cpu.a = cpu.alu_rlc(cpu.a); cpu.set_flag(Z, false); 1 },
            0x08 => { let a = cpu.fetch_word(); cpu.write_word(a, cpu.sp); 5 },
            0x09 => { cpu.alu_add16(cpu.bc()); 2 },
            0x0A => { cpu.a = cpu.read_byte(cpu.bc()); 2 },
            0x0B => { cpu.set_bc(cpu.bc().wrapping_sub(1)); 2 },
            0x0C => { cpu.c = cpu.alu_inc(cpu.c); 1 },
            0x0D => { cpu.c = cpu.alu_dec(cpu.c); 1 },
            0x0E => { cpu.c = cpu.fetch_byte(); 2 },
            0x0F => { cpu.a = cpu.alu_rrc(cpu.a); cpu.set_flag(Z, false); 1 },

            // TODO: This isn't used, right?
            // 0x10 => { cpu.mmu.switch_speed(); 1 }, // STOP

            0x11 => { let v = cpu.fetch_word(); cpu.set_de(v); 3 },
            0x12 => { cpu.write_byte(cpu.de(), cpu.a); 2 },
            0x13 => { cpu.set_de(cpu.de().wrapping_add(1)); 2 },
            0x14 => { cpu.d = cpu.alu_inc(cpu.d); 1 },
            0x15 => { cpu.d = cpu.alu_dec(cpu.d); 1 },
            0x16 => { cpu.d = cpu.fetch_byte(); 2 },
            0x17 => { cpu.a = cpu.alu_rl(cpu.a); cpu.set_flag(Z, false); 1 },
            0x18 => { cpu.cpu_jr(); 3 },
            0x19 => { cpu.alu_add16(cpu.de()); 2 },
            0x1A => { cpu.a = cpu.read_byte(cpu.de()); 2 },
            0x1B => { cpu.set_de(cpu.de().wrapping_sub(1)); 2 },
            0x1C => { cpu.e = cpu.alu_inc(cpu.e); 1 },
            0x1D => { cpu.e = cpu.alu_dec(cpu.e); 1 },
            0x1E => { cpu.e = cpu.fetch_byte(); 2 },
            0x1F => { cpu.a = cpu.alu_rr(cpu.a); cpu.set_flag(Z, false); 1 },
            0x20 => { if !cpu.flag(Z) { cpu.cpu_jr(); 3 } else { cpu.pc += 1; 2 } },
            0x21 => { let v = cpu.fetch_word(); cpu.set_hl(v); 3 },
            0x22 => { let addr = cpu.hli(); cpu.write_byte(addr, cpu.a); 2 },
            0x23 => { let v = cpu.hl().wrapping_add(1); cpu.set_hl(v); 2 },
            0x24 => { cpu.h = cpu.alu_inc(cpu.h); 1 },
            0x25 => { cpu.h = cpu.alu_dec(cpu.h); 1 },
            0x26 => { cpu.h = cpu.fetch_byte(); 2 },
            0x27 => { cpu.alu_daa(); 1 },
            0x28 => { if cpu.flag(Z) { cpu.cpu_jr(); 3 } else { cpu.pc += 1; 2  } },
            0x29 => { let v = cpu.hl(); cpu.alu_add16(v); 2 },
            0x2A => { let addr = cpu.hli(); cpu.a = cpu.read_byte(addr); 2 },
            0x2B => { let v = cpu.hl().wrapping_sub(1); cpu.set_hl(v); 2 },
            0x2C => { cpu.l = cpu.alu_inc(cpu.l); 1 },
            0x2D => { cpu.l = cpu.alu_dec(cpu.l); 1 },
            0x2E => { cpu.l = cpu.fetch_byte(); 2 },
            0x2F => { cpu.a = !cpu.a; cpu.set_flag(H, true); cpu.set_flag(N, true); 1 },
            0x30 => { if !cpu.flag(C) { cpu.cpu_jr(); 3 } else { cpu.pc += 1; 2 } },
            0x31 => { cpu.sp = cpu.fetch_word(); 3 },
            0x32 => { let addr = cpu.hld(); cpu.write_byte(addr, cpu.a); 2 },
            0x33 => { cpu.sp = cpu.sp.wrapping_add(1); 2 },
            0x34 => { let a = cpu.hl(); let v = cpu.read_byte(a); let v2 = cpu.alu_inc(v); cpu.write_byte(a, v2); 3 },
            0x35 => { let a = cpu.hl(); let v = cpu.read_byte(a); let v2 = cpu.alu_dec(v); cpu.write_byte(a, v2); 3 },
            0x36 => { let v = cpu.fetch_byte(); cpu.write_byte(cpu.hl(), v); 3 },
            0x37 => { cpu.set_flag(C, true); cpu.set_flag(H, false); cpu.set_flag(N, false); 1 },
            0x38 => { if cpu.flag(C) { cpu.cpu_jr(); 3 } else { cpu.pc += 1; 2  } },
            0x39 => { cpu.alu_add16(cpu.sp); 2 },
            0x3A => { let addr = cpu.hld(); cpu.a = cpu.read_byte(addr); 2 },
            0x3B => { cpu.sp = cpu.sp.wrapping_sub(1); 2 },
            0x3C => { cpu.a = cpu.alu_inc(cpu.a); 1 },
            0x3D => { cpu.a = cpu.alu_dec(cpu.a); 1 },
            0x3E => { cpu.a = cpu.fetch_byte(); 2 },
            0x3F => { let v = !cpu.flag(C); cpu.set_flag(C, v); cpu.set_flag(H, false); cpu.set_flag(N, false); 1 },
            0x40 => { 1 },
            0x41 => { cpu.b = cpu.c; 1 },
            0x42 => { cpu.b = cpu.d; 1 },
            0x43 => { cpu.b = cpu.e; 1 },
            0x44 => { cpu.b = cpu.h; 1 },
            0x45 => { cpu.b = cpu.l; 1 },
            0x46 => { cpu.b = cpu.read_byte(cpu.hl()); 2 },
            0x47 => { cpu.b = cpu.a; 1 },
            0x48 => { cpu.c = cpu.b; 1 },
            0x49 => { 1 },
            0x4A => { cpu.c = cpu.d; 1 },
            0x4B => { cpu.c = cpu.e; 1 },
            0x4C => { cpu.c = cpu.h; 1 },
            0x4D => { cpu.c = cpu.l; 1 },
            0x4E => { cpu.c = cpu.read_byte(cpu.hl()); 2 },
            0x4F => { cpu.c = cpu.a; 1 },
            0x50 => { cpu.d = cpu.b; 1 },
            0x51 => { cpu.d = cpu.c; 1 },
            0x52 => { 1 },
            0x53 => { cpu.d = cpu.e; 1 },
            0x54 => { cpu.d = cpu.h; 1 },
            0x55 => { cpu.d = cpu.l; 1 },
            0x56 => { cpu.d = cpu.read_byte(cpu.hl()); 2 },
            0x57 => { cpu.d = cpu.a; 1 },
            0x58 => { cpu.e = cpu.b; 1 },
            0x59 => { cpu.e = cpu.c; 1 },
            0x5A => { cpu.e = cpu.d; 1 },
            0x5B => { 1 },
            0x5C => { cpu.e = cpu.h; 1 },
            0x5D => { cpu.e = cpu.l; 1 },
            0x5E => { cpu.e = cpu.read_byte(cpu.hl()); 2 },
            0x5F => { cpu.e = cpu.a; 1 },
            0x60 => { cpu.h = cpu.b; 1 },
            0x61 => { cpu.h = cpu.c; 1 },
            0x62 => { cpu.h = cpu.d; 1 },
            0x63 => { cpu.h = cpu.e; 1 },
            0x64 => { 1 },
            0x65 => { cpu.h = cpu.l; 1 },
            0x66 => { cpu.h = cpu.read_byte(cpu.hl()); 2 },
            0x67 => { cpu.h = cpu.a; 1 },
            0x68 => { cpu.l = cpu.b; 1 },
            0x69 => { cpu.l = cpu.c; 1 },
            0x6A => { cpu.l = cpu.d; 1 },
            0x6B => { cpu.l = cpu.e; 1 },
            0x6C => { cpu.l = cpu.h; 1 },
            0x6D => { 1 },
            0x6E => { cpu.l = cpu.read_byte(cpu.hl()); 2 },
            0x6F => { cpu.l = cpu.a; 1 },
            0x70 => { cpu.write_byte(cpu.hl(), cpu.b); 2 },
            0x71 => { cpu.write_byte(cpu.hl(), cpu.c); 2 },
            0x72 => { cpu.write_byte(cpu.hl(), cpu.d); 2 },
            0x73 => { cpu.write_byte(cpu.hl(), cpu.e); 2 },
            0x74 => { cpu.write_byte(cpu.hl(), cpu.h); 2 },
            0x75 => { cpu.write_byte(cpu.hl(), cpu.l); 2 },
            0x76 => { cpu.halted = true; 1 },
            0x77 => { cpu.write_byte(cpu.hl(), cpu.a); 2 },
            0x78 => { cpu.a = cpu.b; 1 },
            0x79 => { cpu.a = cpu.c; 1 },
            0x7A => { cpu.a = cpu.d; 1 },
            0x7B => { cpu.a = cpu.e; 1 },
            0x7C => { cpu.a = cpu.h; 1 },
            0x7D => { cpu.a = cpu.l; 1 },
            0x7E => { cpu.a = cpu.read_byte(cpu.hl()); 2 },
            0x7F => { 1 },
            0x80 => { cpu.alu_add(cpu.b, false); 1 },
            0x81 => { cpu.alu_add(cpu.c, false); 1 },
            0x82 => { cpu.alu_add(cpu.d, false); 1 },
            0x83 => { cpu.alu_add(cpu.e, false); 1 },
            0x84 => { cpu.alu_add(cpu.h, false); 1 },
            0x85 => { cpu.alu_add(cpu.l, false); 1 },
            0x86 => { let v = cpu.read_byte(cpu.hl()); cpu.alu_add(v, false); 2 },
            0x87 => { cpu.alu_add(cpu.a, false); 1 },
            0x88 => { cpu.alu_add(cpu.b, true); 1 },
            0x89 => { cpu.alu_add(cpu.c, true); 1 },
            0x8A => { cpu.alu_add(cpu.d, true); 1 },
            0x8B => { cpu.alu_add(cpu.e, true); 1 },
            0x8C => { cpu.alu_add(cpu.h, true); 1 },
            0x8D => { cpu.alu_add(cpu.l, true); 1 },
            0x8E => { let v = cpu.read_byte(cpu.hl()); cpu.alu_add(v, true); 2 },
            0x8F => { cpu.alu_add(cpu.a, true); 1 },
            0x90 => { cpu.alu_sub(cpu.b, false); 1 },
            0x91 => { cpu.alu_sub(cpu.c, false); 1 },
            0x92 => { cpu.alu_sub(cpu.d, false); 1 },
            0x93 => { cpu.alu_sub(cpu.e, false); 1 },
            0x94 => { cpu.alu_sub(cpu.h, false); 1 },
            0x95 => { cpu.alu_sub(cpu.l, false); 1 },
            0x96 => { let v = cpu.read_byte(cpu.hl()); cpu.alu_sub(v, false); 2 },
            0x97 => { cpu.alu_sub(cpu.a, false); 1 },
            0x98 => { cpu.alu_sub(cpu.b, true); 1 },
            0x99 => { cpu.alu_sub(cpu.c, true); 1 },
            0x9A => { cpu.alu_sub(cpu.d, true); 1 },
            0x9B => { cpu.alu_sub(cpu.e, true); 1 },
            0x9C => { cpu.alu_sub(cpu.h, true); 1 },
            0x9D => { cpu.alu_sub(cpu.l, true); 1 },
            0x9E => { let v = cpu.read_byte(cpu.hl()); cpu.alu_sub(v, true); 2 },
            0x9F => { cpu.alu_sub(cpu.a, true); 1 },
            0xA0 => { cpu.alu_and(cpu.b); 1 },
            0xA1 => { cpu.alu_and(cpu.c); 1 },
            0xA2 => { cpu.alu_and(cpu.d); 1 },
            0xA3 => { cpu.alu_and(cpu.e); 1 },
            0xA4 => { cpu.alu_and(cpu.h); 1 },
            0xA5 => { cpu.alu_and(cpu.l); 1 },
            0xA6 => { let v = cpu.read_byte(cpu.hl()); cpu.alu_and(v); 2 },
            0xA7 => { cpu.alu_and(cpu.a); 1 },
            0xA8 => { cpu.alu_xor(cpu.b); 1 },
            0xA9 => { cpu.alu_xor(cpu.c); 1 },
            0xAA => { cpu.alu_xor(cpu.d); 1 },
            0xAB => { cpu.alu_xor(cpu.e); 1 },
            0xAC => { cpu.alu_xor(cpu.h); 1 },
            0xAD => { cpu.alu_xor(cpu.l); 1 },
            0xAE => { let v = cpu.read_byte(cpu.hl()); cpu.alu_xor(v); 2 },
            0xAF => { cpu.alu_xor(cpu.a); 1 },
            0xB0 => { cpu.alu_or(cpu.b); 1 },
            0xB1 => { cpu.alu_or(cpu.c); 1 },
            0xB2 => { cpu.alu_or(cpu.d); 1 },
            0xB3 => { cpu.alu_or(cpu.e); 1 },
            0xB4 => { cpu.alu_or(cpu.h); 1 },
            0xB5 => { cpu.alu_or(cpu.l); 1 },
            0xB6 => { let v = cpu.read_byte(cpu.hl()); cpu.alu_or(v); 2 },
            0xB7 => { cpu.alu_or(cpu.a); 1 },
            0xB8 => { cpu.alu_cp(cpu.b); 1 },
            0xB9 => { cpu.alu_cp(cpu.c); 1 },
            0xBA => { cpu.alu_cp(cpu.d); 1 },
            0xBB => { cpu.alu_cp(cpu.e); 1 },
            0xBC => { cpu.alu_cp(cpu.h); 1 },
            0xBD => { cpu.alu_cp(cpu.l); 1 },
            0xBE => { let v = cpu.read_byte(cpu.hl()); cpu.alu_cp(v); 2 },
            0xBF => { cpu.alu_cp(cpu.a); 1 },
            0xC0 => { if !cpu.flag(Z) { cpu.pc = cpu.stack_pop(); 5 } else { 2 } },
            0xC1 => { let v = cpu.stack_pop(); cpu.set_bc(v); 3 },
            0xC2 => { if !cpu.flag(Z) { cpu.pc = cpu.fetch_word(); 4 } else { cpu.pc += 2; 3 } },
            0xC3 => { cpu.pc = cpu.fetch_word(); 4 },
            0xC4 => { if !cpu.flag(Z) { cpu.stack_push(cpu.pc + 2); cpu.pc = cpu.fetch_word(); 6 } else { cpu.pc += 2; 3 } },
            0xC5 => { cpu.stack_push(cpu.bc()); 4 },
            0xC6 => { let v = cpu.fetch_byte(); cpu.alu_add(v, false); 2 },
            0xC7 => { cpu.stack_push(cpu.pc); cpu.pc = 0x00; 4 },
            0xC8 => { if cpu.flag(Z) { cpu.pc = cpu.stack_pop(); 5 } else { 2 } },
            0xC9 => { cpu.pc = cpu.stack_pop(); 4 },
            0xCA => { if cpu.flag(Z) { cpu.pc = cpu.fetch_word(); 4 } else { cpu.pc += 2; 3 } },
            0xCB => { call_cb(cpu) },
            0xCC => { if cpu.flag(Z) { cpu.stack_push(cpu.pc + 2); cpu.pc = cpu.fetch_word(); 6 } else { cpu.pc += 2; 3 } },
            0xCD => { cpu.stack_push(cpu.pc + 2); cpu.pc = cpu.fetch_word(); 6 },
            0xCE => { let v = cpu.fetch_byte(); cpu.alu_add(v, true); 2 },
            0xCF => { cpu.stack_push(cpu.pc); cpu.pc = 0x08; 4 },
            0xD0 => { if !cpu.flag(C) { cpu.pc = cpu.stack_pop(); 5 } else { 2 } },
            0xD1 => { let v = cpu.stack_pop(); cpu.set_de(v); 3 },
            0xD2 => { if !cpu.flag(C) { cpu.pc = cpu.fetch_word(); 4 } else { cpu.pc += 2; 3 } },
            0xD4 => { if !cpu.flag(C) { cpu.stack_push(cpu.pc + 2); cpu.pc = cpu.fetch_word(); 6 } else { cpu.pc += 2; 3 } },
            0xD5 => { cpu.stack_push(cpu.de()); 4 },
            0xD6 => { let v = cpu.fetch_byte(); cpu.alu_sub(v, false); 2 },
            0xD7 => { cpu.stack_push(cpu.pc); cpu.pc = 0x10; 4 },
            0xD8 => { if cpu.flag(C) { cpu.pc = cpu.stack_pop(); 5 } else { 2 } },
            0xD9 => { cpu.pc = cpu.stack_pop(); cpu.setei = 1; 4 },
            0xDA => { if cpu.flag(C) { cpu.pc = cpu.fetch_word(); 4 } else { cpu.pc += 2; 3 } },
            0xDC => { if cpu.flag(C) { cpu.stack_push(cpu.pc + 2); cpu.pc = cpu.fetch_word(); 6 } else { cpu.pc += 2; 3 } },
            0xDE => { let v = cpu.fetch_byte(); cpu.alu_sub(v, true); 2 },
            0xDF => { cpu.stack_push(cpu.pc); cpu.pc = 0x18; 4 },
            0xE0 => { let a = 0xFF00 | cpu.fetch_byte() as u16; cpu.write_byte(a, cpu.a); 3 },
            0xE1 => { let v = cpu.stack_pop(); cpu.set_hl(v); 3 },
            0xE2 => { cpu.write_byte(0xFF00 | cpu.c as u16, cpu.a); 2 },
            0xE5 => { cpu.stack_push(cpu.hl()); 4 },
            0xE6 => { let v = cpu.fetch_byte(); cpu.alu_and(v); 2 },
            0xE7 => { cpu.stack_push(cpu.pc); cpu.pc = 0x20; 4 },
            0xE8 => { cpu.sp = cpu.alu_add16imm(cpu.sp); 4 },
            0xE9 => { cpu.pc = cpu.hl(); 1 },
            0xEA => { let a = cpu.fetch_word(); cpu.write_byte(a, cpu.a); 4 },
            0xEE => { let v = cpu.fetch_byte(); cpu.alu_xor(v); 2 },
            0xEF => { cpu.stack_push(cpu.pc); cpu.pc = 0x28; 4 },
            0xF0 => { let a = 0xFF00 | cpu.fetch_byte() as u16; cpu.a = cpu.read_byte(a); 3 },
            0xF1 => { let v = cpu.stack_pop() & 0xFFF0; cpu.set_af(v); 3 },
            0xF2 => { cpu.a = cpu.read_byte(0xFF00 | cpu.c as u16); 2 },
            0xF3 => { cpu.setdi = 2; 1 },
            0xF5 => { cpu.stack_push(cpu.af()); 4 },
            0xF6 => { let v = cpu.fetch_byte(); cpu.alu_or(v); 2 },
            0xF7 => { cpu.stack_push(cpu.pc); cpu.pc = 0x30; 4 },
            0xF8 => { let r = cpu.alu_add16imm(cpu.sp); cpu.set_hl(r); 3 },
            0xF9 => { cpu.sp = cpu.hl(); 2 },
            0xFA => { let a = cpu.fetch_word(); cpu.a = cpu.read_byte(a); 4 },
            0xFB => { cpu.setei = 2; 1 },
            0xFE => { let v = cpu.fetch_byte(); cpu.alu_cp(v); 2 },
            0xFF => { cpu.stack_push(cpu.pc); cpu.pc = 0x38; 4 },
            other=> panic!("Instruction {other:02X} is not implemented"),
        }
    }


    #[rustfmt::skip]
    fn call_cb(cpu: &mut Cpu) -> u32 {
        let opcode = cpu.fetch_byte();
        match opcode {
            0x00 => { cpu.b = cpu.alu_rlc(cpu.b); 2 },
            0x01 => { cpu.c = cpu.alu_rlc(cpu.c); 2 },
            0x02 => { cpu.d = cpu.alu_rlc(cpu.d); 2 },
            0x03 => { cpu.e = cpu.alu_rlc(cpu.e); 2 },
            0x04 => { cpu.h = cpu.alu_rlc(cpu.h); 2 },
            0x05 => { cpu.l = cpu.alu_rlc(cpu.l); 2 },
            0x06 => { let a = cpu.hl(); let v = cpu.read_byte(a); let v2 = cpu.alu_rlc(v); cpu.write_byte(a, v2); 4 },
            0x07 => { cpu.a = cpu.alu_rlc(cpu.a); 2 },
            0x08 => { cpu.b = cpu.alu_rrc(cpu.b); 2 },
            0x09 => { cpu.c = cpu.alu_rrc(cpu.c); 2 },
            0x0A => { cpu.d = cpu.alu_rrc(cpu.d); 2 },
            0x0B => { cpu.e = cpu.alu_rrc(cpu.e); 2 },
            0x0C => { cpu.h = cpu.alu_rrc(cpu.h); 2 },
            0x0D => { cpu.l = cpu.alu_rrc(cpu.l); 2 },
            0x0E => { let a = cpu.hl(); let v = cpu.read_byte(a); let v2 = cpu.alu_rrc(v); cpu.write_byte(a, v2); 4 },
            0x0F => { cpu.a = cpu.alu_rrc(cpu.a); 2 },
            0x10 => { cpu.b = cpu.alu_rl(cpu.b); 2 },
            0x11 => { cpu.c = cpu.alu_rl(cpu.c); 2 },
            0x12 => { cpu.d = cpu.alu_rl(cpu.d); 2 },
            0x13 => { cpu.e = cpu.alu_rl(cpu.e); 2 },
            0x14 => { cpu.h = cpu.alu_rl(cpu.h); 2 },
            0x15 => { cpu.l = cpu.alu_rl(cpu.l); 2 },
            0x16 => { let a = cpu.hl(); let v = cpu.read_byte(a); let v2 = cpu.alu_rl(v); cpu.write_byte(a, v2); 4 },
            0x17 => { cpu.a = cpu.alu_rl(cpu.a); 2 },
            0x18 => { cpu.b = cpu.alu_rr(cpu.b); 2 },
            0x19 => { cpu.c = cpu.alu_rr(cpu.c); 2 },
            0x1A => { cpu.d = cpu.alu_rr(cpu.d); 2 },
            0x1B => { cpu.e = cpu.alu_rr(cpu.e); 2 },
            0x1C => { cpu.h = cpu.alu_rr(cpu.h); 2 },
            0x1D => { cpu.l = cpu.alu_rr(cpu.l); 2 },
            0x1E => { let a = cpu.hl(); let v = cpu.read_byte(a); let v2 = cpu.alu_rr(v); cpu.write_byte(a, v2); 4 },
            0x1F => { cpu.a = cpu.alu_rr(cpu.a); 2 },
            0x20 => { cpu.b = cpu.alu_sla(cpu.b); 2 },
            0x21 => { cpu.c = cpu.alu_sla(cpu.c); 2 },
            0x22 => { cpu.d = cpu.alu_sla(cpu.d); 2 },
            0x23 => { cpu.e = cpu.alu_sla(cpu.e); 2 },
            0x24 => { cpu.h = cpu.alu_sla(cpu.h); 2 },
            0x25 => { cpu.l = cpu.alu_sla(cpu.l); 2 },
            0x26 => { let a = cpu.hl(); let v = cpu.read_byte(a); let v2 = cpu.alu_sla(v); cpu.write_byte(a, v2); 4 },
            0x27 => { cpu.a = cpu.alu_sla(cpu.a); 2 },
            0x28 => { cpu.b = cpu.alu_sra(cpu.b); 2 },
            0x29 => { cpu.c = cpu.alu_sra(cpu.c); 2 },
            0x2A => { cpu.d = cpu.alu_sra(cpu.d); 2 },
            0x2B => { cpu.e = cpu.alu_sra(cpu.e); 2 },
            0x2C => { cpu.h = cpu.alu_sra(cpu.h); 2 },
            0x2D => { cpu.l = cpu.alu_sra(cpu.l); 2 },
            0x2E => { let a = cpu.hl(); let v = cpu.read_byte(a); let v2 = cpu.alu_sra(v); cpu.write_byte(a, v2); 4 },
            0x2F => { cpu.a = cpu.alu_sra(cpu.a); 2 },
            0x30 => { cpu.b = cpu.alu_swap(cpu.b); 2 },
            0x31 => { cpu.c = cpu.alu_swap(cpu.c); 2 },
            0x32 => { cpu.d = cpu.alu_swap(cpu.d); 2 },
            0x33 => { cpu.e = cpu.alu_swap(cpu.e); 2 },
            0x34 => { cpu.h = cpu.alu_swap(cpu.h); 2 },
            0x35 => { cpu.l = cpu.alu_swap(cpu.l); 2 },
            0x36 => { let a = cpu.hl(); let v = cpu.read_byte(a); let v2 = cpu.alu_swap(v); cpu.write_byte(a, v2); 4 },
            0x37 => { cpu.a = cpu.alu_swap(cpu.a); 2 },
            0x38 => { cpu.b = cpu.alu_srl(cpu.b); 2 },
            0x39 => { cpu.c = cpu.alu_srl(cpu.c); 2 },
            0x3A => { cpu.d = cpu.alu_srl(cpu.d); 2 },
            0x3B => { cpu.e = cpu.alu_srl(cpu.e); 2 },
            0x3C => { cpu.h = cpu.alu_srl(cpu.h); 2 },
            0x3D => { cpu.l = cpu.alu_srl(cpu.l); 2 },
            0x3E => { let a = cpu.hl(); let v = cpu.read_byte(a); let v2 = cpu.alu_srl(v); cpu.write_byte(a, v2); 4 },
            0x3F => { cpu.a = cpu.alu_srl(cpu.a); 2 },
            0x40 => { cpu.alu_bit(cpu.b, 0); 2 },
            0x41 => { cpu.alu_bit(cpu.c, 0); 2 },
            0x42 => { cpu.alu_bit(cpu.d, 0); 2 },
            0x43 => { cpu.alu_bit(cpu.e, 0); 2 },
            0x44 => { cpu.alu_bit(cpu.h, 0); 2 },
            0x45 => { cpu.alu_bit(cpu.l, 0); 2 },
            0x46 => { let v = cpu.read_byte(cpu.hl()); cpu.alu_bit(v, 0); 3 },
            0x47 => { cpu.alu_bit(cpu.a, 0); 2 },
            0x48 => { cpu.alu_bit(cpu.b, 1); 2 },
            0x49 => { cpu.alu_bit(cpu.c, 1); 2 },
            0x4A => { cpu.alu_bit(cpu.d, 1); 2 },
            0x4B => { cpu.alu_bit(cpu.e, 1); 2 },
            0x4C => { cpu.alu_bit(cpu.h, 1); 2 },
            0x4D => { cpu.alu_bit(cpu.l, 1); 2 },
            0x4E => { let v = cpu.read_byte(cpu.hl()); cpu.alu_bit(v, 1); 3 },
            0x4F => { cpu.alu_bit(cpu.a, 1); 2 },
            0x50 => { cpu.alu_bit(cpu.b, 2); 2 },
            0x51 => { cpu.alu_bit(cpu.c, 2); 2 },
            0x52 => { cpu.alu_bit(cpu.d, 2); 2 },
            0x53 => { cpu.alu_bit(cpu.e, 2); 2 },
            0x54 => { cpu.alu_bit(cpu.h, 2); 2 },
            0x55 => { cpu.alu_bit(cpu.l, 2); 2 },
            0x56 => { let v = cpu.read_byte(cpu.hl()); cpu.alu_bit(v, 2); 3 },
            0x57 => { cpu.alu_bit(cpu.a, 2); 2 },
            0x58 => { cpu.alu_bit(cpu.b, 3); 2 },
            0x59 => { cpu.alu_bit(cpu.c, 3); 2 },
            0x5A => { cpu.alu_bit(cpu.d, 3); 2 },
            0x5B => { cpu.alu_bit(cpu.e, 3); 2 },
            0x5C => { cpu.alu_bit(cpu.h, 3); 2 },
            0x5D => { cpu.alu_bit(cpu.l, 3); 2 },
            0x5E => { let v = cpu.read_byte(cpu.hl()); cpu.alu_bit(v, 3); 3 },
            0x5F => { cpu.alu_bit(cpu.a, 3); 2 },
            0x60 => { cpu.alu_bit(cpu.b, 4); 2 },
            0x61 => { cpu.alu_bit(cpu.c, 4); 2 },
            0x62 => { cpu.alu_bit(cpu.d, 4); 2 },
            0x63 => { cpu.alu_bit(cpu.e, 4); 2 },
            0x64 => { cpu.alu_bit(cpu.h, 4); 2 },
            0x65 => { cpu.alu_bit(cpu.l, 4); 2 },
            0x66 => { let v = cpu.read_byte(cpu.hl()); cpu.alu_bit(v, 4); 3 },
            0x67 => { cpu.alu_bit(cpu.a, 4); 2 },
            0x68 => { cpu.alu_bit(cpu.b, 5); 2 },
            0x69 => { cpu.alu_bit(cpu.c, 5); 2 },
            0x6A => { cpu.alu_bit(cpu.d, 5); 2 },
            0x6B => { cpu.alu_bit(cpu.e, 5); 2 },
            0x6C => { cpu.alu_bit(cpu.h, 5); 2 },
            0x6D => { cpu.alu_bit(cpu.l, 5); 2 },
            0x6E => { let v = cpu.read_byte(cpu.hl()); cpu.alu_bit(v, 5); 3 },
            0x6F => { cpu.alu_bit(cpu.a, 5); 2 },
            0x70 => { cpu.alu_bit(cpu.b, 6); 2 },
            0x71 => { cpu.alu_bit(cpu.c, 6); 2 },
            0x72 => { cpu.alu_bit(cpu.d, 6); 2 },
            0x73 => { cpu.alu_bit(cpu.e, 6); 2 },
            0x74 => { cpu.alu_bit(cpu.h, 6); 2 },
            0x75 => { cpu.alu_bit(cpu.l, 6); 2 },
            0x76 => { let v = cpu.read_byte(cpu.hl()); cpu.alu_bit(v, 6); 3 },
            0x77 => { cpu.alu_bit(cpu.a, 6); 2 },
            0x78 => { cpu.alu_bit(cpu.b, 7); 2 },
            0x79 => { cpu.alu_bit(cpu.c, 7); 2 },
            0x7A => { cpu.alu_bit(cpu.d, 7); 2 },
            0x7B => { cpu.alu_bit(cpu.e, 7); 2 },
            0x7C => { cpu.alu_bit(cpu.h, 7); 2 },
            0x7D => { cpu.alu_bit(cpu.l, 7); 2 },
            0x7E => { let v = cpu.read_byte(cpu.hl()); cpu.alu_bit(v, 7); 3 },
            0x7F => { cpu.alu_bit(cpu.a, 7); 2 },
            0x80 => { cpu.b &= !(1 << 0); 2 },
            0x81 => { cpu.c &= !(1 << 0); 2 },
            0x82 => { cpu.d &= !(1 << 0); 2 },
            0x83 => { cpu.e &= !(1 << 0); 2 },
            0x84 => { cpu.h &= !(1 << 0); 2 },
            0x85 => { cpu.l &= !(1 << 0); 2 },
            0x86 => { let a = cpu.hl(); let v = cpu.read_byte(a) & !(1 << 0); cpu.write_byte(a, v); 4 },
            0x87 => { cpu.a &= !(1 << 0); 2 },
            0x88 => { cpu.b &= !(1 << 1); 2 },
            0x89 => { cpu.c &= !(1 << 1); 2 },
            0x8A => { cpu.d &= !(1 << 1); 2 },
            0x8B => { cpu.e &= !(1 << 1); 2 },
            0x8C => { cpu.h &= !(1 << 1); 2 },
            0x8D => { cpu.l &= !(1 << 1); 2 },
            0x8E => { let a = cpu.hl(); let v = cpu.read_byte(a) & !(1 << 1); cpu.write_byte(a, v); 4 },
            0x8F => { cpu.a &= !(1 << 1); 2 },
            0x90 => { cpu.b &= !(1 << 2); 2 },
            0x91 => { cpu.c &= !(1 << 2); 2 },
            0x92 => { cpu.d &= !(1 << 2); 2 },
            0x93 => { cpu.e &= !(1 << 2); 2 },
            0x94 => { cpu.h &= !(1 << 2); 2 },
            0x95 => { cpu.l &= !(1 << 2); 2 },
            0x96 => { let a = cpu.hl(); let v = cpu.read_byte(a) & !(1 << 2); cpu.write_byte(a, v); 4 },
            0x97 => { cpu.a &= !(1 << 2); 2 },
            0x98 => { cpu.b &= !(1 << 3); 2 },
            0x99 => { cpu.c &= !(1 << 3); 2 },
            0x9A => { cpu.d &= !(1 << 3); 2 },
            0x9B => { cpu.e &= !(1 << 3); 2 },
            0x9C => { cpu.h &= !(1 << 3); 2 },
            0x9D => { cpu.l &= !(1 << 3); 2 },
            0x9E => { let a = cpu.hl(); let v = cpu.read_byte(a) & !(1 << 3); cpu.write_byte(a, v); 4 },
            0x9F => { cpu.a &= !(1 << 3); 2 },
            0xA0 => { cpu.b &= !(1 << 4); 2 },
            0xA1 => { cpu.c &= !(1 << 4); 2 },
            0xA2 => { cpu.d &= !(1 << 4); 2 },
            0xA3 => { cpu.e &= !(1 << 4); 2 },
            0xA4 => { cpu.h &= !(1 << 4); 2 },
            0xA5 => { cpu.l &= !(1 << 4); 2 },
            0xA6 => { let a = cpu.hl(); let v = cpu.read_byte(a) & !(1 << 4); cpu.write_byte(a, v); 4 },
            0xA7 => { cpu.a &= !(1 << 4); 2 },
            0xA8 => { cpu.b &= !(1 << 5); 2 },
            0xA9 => { cpu.c &= !(1 << 5); 2 },
            0xAA => { cpu.d &= !(1 << 5); 2 },
            0xAB => { cpu.e &= !(1 << 5); 2 },
            0xAC => { cpu.h &= !(1 << 5); 2 },
            0xAD => { cpu.l &= !(1 << 5); 2 },
            0xAE => { let a = cpu.hl(); let v = cpu.read_byte(a) & !(1 << 5); cpu.write_byte(a, v); 4 },
            0xAF => { cpu.a &= !(1 << 5); 2 },
            0xB0 => { cpu.b &= !(1 << 6); 2 },
            0xB1 => { cpu.c &= !(1 << 6); 2 },
            0xB2 => { cpu.d &= !(1 << 6); 2 },
            0xB3 => { cpu.e &= !(1 << 6); 2 },
            0xB4 => { cpu.h &= !(1 << 6); 2 },
            0xB5 => { cpu.l &= !(1 << 6); 2 },
            0xB6 => { let a = cpu.hl(); let v = cpu.read_byte(a) & !(1 << 6); cpu.write_byte(a, v); 4 },
            0xB7 => { cpu.a &= !(1 << 6); 2 },
            0xB8 => { cpu.b &= !(1 << 7); 2 },
            0xB9 => { cpu.c &= !(1 << 7); 2 },
            0xBA => { cpu.d &= !(1 << 7); 2 },
            0xBB => { cpu.e &= !(1 << 7); 2 },
            0xBC => { cpu.h &= !(1 << 7); 2 },
            0xBD => { cpu.l &= !(1 << 7); 2 },
            0xBE => { let a = cpu.hl(); let v = cpu.read_byte(a) & !(1 << 7); cpu.write_byte(a, v); 4 },
            0xBF => { cpu.a &= !(1 << 7); 2 },
            0xC0 => { cpu.b |= 1 << 0; 2 },
            0xC1 => { cpu.c |= 1 << 0; 2 },
            0xC2 => { cpu.d |= 1 << 0; 2 },
            0xC3 => { cpu.e |= 1 << 0; 2 },
            0xC4 => { cpu.h |= 1 << 0; 2 },
            0xC5 => { cpu.l |= 1 << 0; 2 },
            0xC6 => { let a = cpu.hl(); let v = cpu.read_byte(a) | (1 << 0); cpu.write_byte(a, v); 4 },
            0xC7 => { cpu.a |= 1 << 0; 2 },
            0xC8 => { cpu.b |= 1 << 1; 2 },
            0xC9 => { cpu.c |= 1 << 1; 2 },
            0xCA => { cpu.d |= 1 << 1; 2 },
            0xCB => { cpu.e |= 1 << 1; 2 },
            0xCC => { cpu.h |= 1 << 1; 2 },
            0xCD => { cpu.l |= 1 << 1; 2 },
            0xCE => { let a = cpu.hl(); let v = cpu.read_byte(a) | (1 << 1); cpu.write_byte(a, v); 4 },
            0xCF => { cpu.a |= 1 << 1; 2 },
            0xD0 => { cpu.b |= 1 << 2; 2 },
            0xD1 => { cpu.c |= 1 << 2; 2 },
            0xD2 => { cpu.d |= 1 << 2; 2 },
            0xD3 => { cpu.e |= 1 << 2; 2 },
            0xD4 => { cpu.h |= 1 << 2; 2 },
            0xD5 => { cpu.l |= 1 << 2; 2 },
            0xD6 => { let a = cpu.hl(); let v = cpu.read_byte(a) | (1 << 2); cpu.write_byte(a, v); 4 },
            0xD7 => { cpu.a |= 1 << 2; 2 },
            0xD8 => { cpu.b |= 1 << 3; 2 },
            0xD9 => { cpu.c |= 1 << 3; 2 },
            0xDA => { cpu.d |= 1 << 3; 2 },
            0xDB => { cpu.e |= 1 << 3; 2 },
            0xDC => { cpu.h |= 1 << 3; 2 },
            0xDD => { cpu.l |= 1 << 3; 2 },
            0xDE => { let a = cpu.hl(); let v = cpu.read_byte(a) | (1 << 3); cpu.write_byte(a, v); 4 },
            0xDF => { cpu.a |= 1 << 3; 2 },
            0xE0 => { cpu.b |= 1 << 4; 2 },
            0xE1 => { cpu.c |= 1 << 4; 2 },
            0xE2 => { cpu.d |= 1 << 4; 2 },
            0xE3 => { cpu.e |= 1 << 4; 2 },
            0xE4 => { cpu.h |= 1 << 4; 2 },
            0xE5 => { cpu.l |= 1 << 4; 2 },
            0xE6 => { let a = cpu.hl(); let v = cpu.read_byte(a) | (1 << 4); cpu.write_byte(a, v); 4 },
            0xE7 => { cpu.a |= 1 << 4; 2 },
            0xE8 => { cpu.b |= 1 << 5; 2 },
            0xE9 => { cpu.c |= 1 << 5; 2 },
            0xEA => { cpu.d |= 1 << 5; 2 },
            0xEB => { cpu.e |= 1 << 5; 2 },
            0xEC => { cpu.h |= 1 << 5; 2 },
            0xED => { cpu.l |= 1 << 5; 2 },
            0xEE => { let a = cpu.hl(); let v = cpu.read_byte(a) | (1 << 5); cpu.write_byte(a, v); 4 },
            0xEF => { cpu.a |= 1 << 5; 2 },
            0xF0 => { cpu.b |= 1 << 6; 2 },
            0xF1 => { cpu.c |= 1 << 6; 2 },
            0xF2 => { cpu.d |= 1 << 6; 2 },
            0xF3 => { cpu.e |= 1 << 6; 2 },
            0xF4 => { cpu.h |= 1 << 6; 2 },
            0xF5 => { cpu.l |= 1 << 6; 2 },
            0xF6 => { let a = cpu.hl(); let v = cpu.read_byte(a) | (1 << 6); cpu.write_byte(a, v); 4 },
            0xF7 => { cpu.a |= 1 << 6; 2 },
            0xF8 => { cpu.b |= 1 << 7; 2 },
            0xF9 => { cpu.c |= 1 << 7; 2 },
            0xFA => { cpu.d |= 1 << 7; 2 },
            0xFB => { cpu.e |= 1 << 7; 2 },
            0xFC => { cpu.h |= 1 << 7; 2 },
            0xFD => { cpu.l |= 1 << 7; 2 },
            0xFE => { let a = cpu.hl(); let v = cpu.read_byte(a) | (1 << 7); cpu.write_byte(a, v); 4 },
            0xFF => { cpu.a |= 1 << 7; 2 },
        }
    }

    move || {
        loop {
            let n = call(&mut cpu);

            let mut g = cpu.cycle(n);

            cpu = loop {
                match std::pin::Pin::new(&mut g).resume(()) {
                    std::ops::GeneratorState::Yielded(cycles) => yield cycles,
                    std::ops::GeneratorState::Complete(cpu) => break cpu,
                }
            };
        }
    }
}
